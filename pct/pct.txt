for every item I in f do 
begin
	Do a preorder scan of the Reduced PC-tree to get all
	possible paths ending with item number I.
	
	for all transactions heads h in the reduced PC-tree do
	begin
		if (h> = I) remove h from the reduced PC -tree;
		else {store count[I ] as first element, all other elements
			before I and element I, as next in path p }
	continue search for I in Reduced PC –tree until the end of the tree
	end.

	/* maintain count of items in p */

	/*Reduce all the paths in p to contain only frequent itemset
	associated with I. */
	for all paths p do 
	begin
		for all I in p do 
		begin
			If I is not frequent, remove I from p
			else, add I to the set T.
		end
	end

	/* Finding the association amongst the elements in T. */
	for all Ij in T, j from 1 to m do 
	begin
		for all reduced paths p do 
		begin
			if Ij € p, put all elements after Ij and before I in r.
			count[ j ]=count[ Ij ]
		end
		
		/*Reduce r*/
		for all paths r do 
		begin
			for all I in r do 
			begin
				if I is not frequent with Ij remove I from r
			end
			
			if r contains more than two frequent items then
			count[ r ]=count[ I ]
		end
	
		/*Finding the frequency of reduced paths.*/
		for all reduced paths rk , k from 1 to N do 
		begin
			for all reduced paths rl , l from 1 to N, k ≠ l do
			begin
				If (rk= = rl)
					N=N-1(Delete rl)
					count[ k ]= count [k ]+ count [ l ]
					fcount[k]=count[ k]
				If ( rk is contained in rl )
					count[ k ]= count [k ]+ count [ l ]
					fcount[k]=count[ k]
			end
		end
		
		/*finding Potential closed frequent itemsets*/
		Initialize i to 1
		for all reduced paths rk , k from 1 to N do 
		begin
			if ( fcount[ k ] >= s) and there exists no other path containing rk with the same support as that of rk then move rk to Ci and increment i by 1;
			else ignore rk
		end
	end
end


/* finding frequent closed itemsets*/
n=i

for all reduced paths Ck , k from 1 to i-1 do 
begin
	for all reduced paths Cj , j from 2 to i do 
	begin
		if Ck is contained in any of the Cj with the same support
		then ignore Ck, n=n-1;
		else
	end
end

/* Recovering proper subsets which are closed frequent
itemsets. */
for all reduced paths Ck , k from 1 to n-1 do 
begin
	for every subset s of Ck containing 2 or more items
	begin
		if s is properly contained in any of the Cj, j from 2 to n and s is not equal to any of the Cj then
		add s to closed frequent itemset if count of s is not equal to count of Cj;
	end
end